from io import BytesIO
from gtts import gTTS
import argparse
import pygame
from pydub import AudioSegment


def play_from_bytes(audio_bytes, output_file, volume=1.0, speed=1.0):
    bytes_io = BytesIO(audio_bytes)
    audio_segment = AudioSegment.from_file(bytes_io)
    audio_segment = audio_segment - (60 - volume * 60)
    if speed != 1.0:
        audio_segment = audio_segment.speedup(playback_speed=speed)
    if output_file != '-':
        audio_segment.export(output_file)
    else:
        temp_audio = BytesIO()
        audio_segment.export(temp_audio)
        temp_audio.seek(0)
        pygame.mixer.init()
        pygame.mixer.music.load(temp_audio)
        pygame.mixer.music.play()
        pygame.time.wait(int(audio_segment.duration_seconds * 1000))

parser = argparse.ArgumentParser(description='Text-to-speech based on Google API')
parser.add_argument('output_file', help='Output folder for the generated audio file. Use \'-\' on this arg, for make the generated audio to be played on-the-fly instead of generating an audio file')
parser.add_argument('lang', help='The language (short name) for the output voice')
parser.add_argument('gain', type=float, default=1, help='Voice gain (0.0 = no sound, 1.0 = normal volume, 1.1 > higher than normal)')
parser.add_argument('speed', type=float, default=1, help='Voice speed (1 = normal speed, 2 = 2x speed, etc)')
parser.add_argument('slow', help='Set \'True\' if you want the original audio generated by Google API comes slowed')
parser.add_argument('text', nargs='+', help='Texto a ser lido')
args = parser.parse_args()

tts_audio = gTTS(text=' '.join(args.text), lang=args.lang, slow=False if args.slow != 'True' else True)
temp_audio_bytes = BytesIO()
tts_audio.write_to_fp(temp_audio_bytes)
play_from_bytes(temp_audio_bytes.getvalue(), args.output_file, args.gain, args.speed)